#
# Deploy site
#
# Parameters
#    SKIP_UNIT_TESTS - set to false to skip unit tests, note that content deployments that use code
#                      that has already been unit tested does not value too much from rerunning the
#                      unit tests, so for such pipelines you can set this to false to speed up the
#                      build.
#

platform: linux

image_resource:
  type: docker-image
  source:
    repository: google/cloud-sdk
    tag: alpine

params:
  AUTH_KEY: ((gcp.service-account-key))
  CHAT_DOMAIN: ((gatsby.chat-domain))
  GCP_SECRETS_VERSION: ((gcp.secrets-version))
  NETLIFY_BUCKET_NAME: ((gcp.netlify-bucket-name))
  GATSBY_ASSETS_PATH: ((gatsby.assets-path))

inputs:
- name: census-worth-self-help
- name: content-repository

caches:
- path: census-worth-self-help/site/node_modules
- path: .npm
- path: .cypress-cache

run:
  path: sh
  args:
  - -exec
  - |
    census-worth-self-help/pipeline/tasks/task-scripts/validate-deploy-site-env.sh
    census-worth-self-help/pipeline/tasks/task-scripts/activate-service-account.sh
    gcloud config set project $PROJECT

    apk add --no-progress --update nodejs nodejs-npm
    echo "npm version"
    npm -v

    export ROOT_FOLDER=$(pwd)
    export CYPRESS_CACHE_FOLDER=${ROOT_FOLDER}/.cypress-cache
    cd census-worth-self-help/site

    if [ "${SKIP_UNIT_TESTS}" == "true" ] ; then
      npm install --only=prod
    else
      npm install
    fi

    if [ "${PATCH_NETLIFY}" == "true" ]; then
      gsutil cp gs://$NETLIFY_BUCKET_NAME/worth-netlify-cms-app-2-9-1-x.tar.gz .
      npm install worth-netlify-cms-app-2-9-1-x.tar.gz --only=prod
    fi

    BUILD="_build/content/"
    mkdir -p "$BUILD" && cp -R ../../content-repository/content/* "$BUILD"
    ASSET_DIR="static/assets/"
    cp -R ../../content-repository/static/assets/ "$ASSET_DIR"

    if [ "${INJECT_DEPLOYMENT_INFORMATION}" == "true" ] ; then
      ../pipeline/tasks/task-scripts/inject-deployment-information.sh
    fi

    if [ "${SKIP_UNIT_TESTS}" == "true" ] ; then
      npm run build-no-audit-no-test
    else
      npm run build-no-audit
    fi

    APP_FILE=ci-app.yaml

    ../pipeline/tasks/task-scripts/configure-app.sh ${APP_FILE}
    ../pipeline/tasks/task-scripts/prepare-site.sh ${APP_FILE}
    ../pipeline/tasks/task-scripts/clean-up-old-appengine-versions.sh $SERVICE
    gcloud app deploy -q ci-app.yaml